{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/**\n * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18\n */\nexport interface JsonWebKey {\n  /**\n   * Key identifier.\n   */\n  kid?: string;\n  /**\n   * JsonWebKey Key Type (kty), as defined in\n   * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. Possible values include:\n   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   */\n  kty?: JsonWebKeyType;\n  keyOps?: string[];\n  /**\n   * RSA modulus.\n   */\n  n?: Uint8Array;\n  /**\n   * RSA public exponent.\n   */\n  e?: Uint8Array;\n  /**\n   * RSA private exponent, or the D component of an EC private key.\n   */\n  d?: Uint8Array;\n  /**\n   * RSA private key parameter.\n   */\n  dp?: Uint8Array;\n  /**\n   * RSA private key parameter.\n   */\n  dq?: Uint8Array;\n  /**\n   * RSA private key parameter.\n   */\n  qi?: Uint8Array;\n  /**\n   * RSA secret prime.\n   */\n  p?: Uint8Array;\n  /**\n   * RSA secret prime, with p < q.\n   */\n  q?: Uint8Array;\n  /**\n   * Symmetric key.\n   */\n  k?: Uint8Array;\n  /**\n   * HSM Token, used with 'Bring Your Own Key'.\n   */\n  t?: Uint8Array;\n  /**\n   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:\n   * 'P-256', 'P-384', 'P-521', 'P-256K'\n   */\n  crv?: JsonWebKeyCurveName;\n  /**\n   * X component of an EC public key.\n   */\n  x?: Uint8Array;\n  /**\n   * Y component of an EC public key.\n   */\n  y?: Uint8Array;\n}\n\n/**\n * The object attributes managed by the KeyVault service.\n */\nexport interface Attributes {\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * Not before date in UTC.\n   */\n  notBefore?: Date;\n  /**\n   * Expiry date in UTC.\n   */\n  expires?: Date;\n  /**\n   * Creation time in UTC.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Last updated time in UTC.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly updated?: Date;\n}\n\n/**\n * The attributes of a key managed by the key vault service.\n */\nexport interface KeyAttributes extends Attributes {\n  /**\n   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled,\n   * otherwise 0.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recoverableDays?: number;\n  /**\n   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it\n   * contains 'Purgeable' the key can be permanently deleted by a privileged user; otherwise, only\n   * the system can purge the key, at the end of the retention interval. Possible values include:\n   * 'Purgeable', 'Recoverable+Purgeable', 'Recoverable', 'Recoverable+ProtectedSubscription',\n   * 'CustomizedRecoverable+Purgeable', 'CustomizedRecoverable',\n   * 'CustomizedRecoverable+ProtectedSubscription'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recoveryLevel?: DeletionRecoveryLevel;\n}\n\n/**\n * A KeyBundle consisting of a WebKey plus its attributes.\n */\nexport interface KeyBundle {\n  /**\n   * The Json web key.\n   */\n  key?: JsonWebKey;\n  /**\n   * The key management attributes.\n   */\n  attributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,\n   * then managed will be true.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly managed?: boolean;\n}\n\n/**\n * The key item containing key metadata.\n */\nexport interface KeyItem {\n  /**\n   * Key identifier.\n   */\n  kid?: string;\n  /**\n   * The key management attributes.\n   */\n  attributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,\n   * then managed will be true.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly managed?: boolean;\n}\n\n/**\n * A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info\n */\nexport interface DeletedKeyBundle extends KeyBundle {\n  /**\n   * The url of the recovery object, used to identify and recover the deleted key.\n   */\n  recoveryId?: string;\n  /**\n   * The time when the key is scheduled to be purged, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the key was deleted, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly deletedDate?: Date;\n}\n\n/**\n * The deleted key item containing the deleted key metadata and information about deletion.\n */\nexport interface DeletedKeyItem extends KeyItem {\n  /**\n   * The url of the recovery object, used to identify and recover the deleted key.\n   */\n  recoveryId?: string;\n  /**\n   * The time when the key is scheduled to be purged, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the key was deleted, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly deletedDate?: Date;\n}\n\n/**\n * Properties of the key pair backing a certificate.\n */\nexport interface KeyProperties {\n  /**\n   * Indicates if the private key can be exported.\n   */\n  exportable?: boolean;\n  /**\n   * The type of key pair to be used for the certificate. Possible values include: 'EC', 'EC-HSM',\n   * 'RSA', 'RSA-HSM', 'oct'\n   */\n  keyType?: JsonWebKeyType;\n  /**\n   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.\n   */\n  keySize?: number;\n  /**\n   * Indicates if the same key pair will be used on certificate renewal.\n   */\n  reuseKey?: boolean;\n  /**\n   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:\n   * 'P-256', 'P-384', 'P-521', 'P-256K'\n   */\n  curve?: JsonWebKeyCurveName;\n}\n\n/**\n * The key create parameters.\n */\nexport interface KeyCreateParameters {\n  /**\n   * The type of key to create. For valid values, see JsonWebKeyType. Possible values include:\n   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   */\n  kty: JsonWebKeyType;\n  /**\n   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.\n   */\n  keySize?: number;\n  keyOps?: JsonWebKeyOperation[];\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:\n   * 'P-256', 'P-384', 'P-521', 'P-256K'\n   */\n  curve?: JsonWebKeyCurveName;\n}\n\n/**\n * The key import parameters.\n */\nexport interface KeyImportParameters {\n  /**\n   * Whether to import as a hardware key (HSM) or software key.\n   */\n  hsm?: boolean;\n  /**\n   * The Json web key\n   */\n  key: JsonWebKey;\n  /**\n   * The key management attributes.\n   */\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * The key operations parameters.\n */\nexport interface KeyOperationsParameters {\n  /**\n   * algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'\n   */\n  algorithm: JsonWebKeyEncryptionAlgorithm;\n  value: Uint8Array;\n}\n\n/**\n * The key operations parameters.\n */\nexport interface KeySignParameters {\n  /**\n   * The signing/verification algorithm identifier. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   */\n  algorithm: JsonWebKeySignatureAlgorithm;\n  value: Uint8Array;\n}\n\n/**\n * The key verify parameters.\n */\nexport interface KeyVerifyParameters {\n  /**\n   * The signing/verification algorithm. For more information on possible algorithm types, see\n   * JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',\n   * 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   */\n  algorithm: JsonWebKeySignatureAlgorithm;\n  /**\n   * The digest used for signing.\n   */\n  digest: Uint8Array;\n  /**\n   * The signature to be verified.\n   */\n  signature: Uint8Array;\n}\n\n/**\n * The key update parameters.\n */\nexport interface KeyUpdateParameters {\n  /**\n   * Json web key operations. For more information on possible key operations, see\n   * JsonWebKeyOperation.\n   */\n  keyOps?: JsonWebKeyOperation[];\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * The key restore parameters.\n */\nexport interface KeyRestoreParameters {\n  /**\n   * The backup blob associated with a key bundle.\n   */\n  keyBundleBackup: Uint8Array;\n}\n\n/**\n * The key operation result.\n */\nexport interface KeyOperationResult {\n  /**\n   * Key identifier\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly kid?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly result?: Uint8Array;\n}\n\n/**\n * The key verify result.\n */\nexport interface KeyVerifyResult {\n  /**\n   * True if the signature is verified, otherwise false.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: boolean;\n}\n\n/**\n * The key list result.\n */\nexport interface KeyListResult {\n  /**\n   * A response message containing a list of keys in the key vault along with a link to the next\n   * page of keys.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: KeyItem[];\n  /**\n   * The URL to get the next set of keys.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * A list of keys that have been deleted in this vault.\n */\nexport interface DeletedKeyListResult {\n  /**\n   * A response message containing a list of deleted keys in the vault along with a link to the\n   * next page of deleted keys\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: DeletedKeyItem[];\n  /**\n   * The URL to get the next set of deleted keys.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * The backup key result, containing the backup blob.\n */\nexport interface BackupKeyResult {\n  /**\n   * The backup blob containing the backed up key.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: Uint8Array;\n}\n\n/**\n * The key vault server error.\n */\nexport interface ErrorModel {\n  /**\n   * The error code.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly message?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly innerError?: ErrorModel;\n}\n\n/**\n * The key vault error exception.\n */\nexport interface KeyVaultError {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly error?: ErrorModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientCreateKeyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.\n   */\n  keySize?: number;\n  keyOps?: JsonWebKeyOperation[];\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:\n   * 'P-256', 'P-384', 'P-521', 'P-256K'\n   */\n  curve?: JsonWebKeyCurveName;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientImportKeyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Whether to import as a hardware key (HSM) or software key.\n   */\n  hsm?: boolean;\n  /**\n   * The key management attributes.\n   */\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientUpdateKeyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Json web key operations. For more information on possible key operations, see\n   * JsonWebKeyOperation.\n   */\n  keyOps?: JsonWebKeyOperation[];\n  keyAttributes?: KeyAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetKeyVersionsOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetKeysOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetDeletedKeysOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Defines values for JsonWebKeyType.\n * Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n * @readonly\n * @enum {string}\n */\nexport type JsonWebKeyType = 'EC' | 'EC-HSM' | 'RSA' | 'RSA-HSM' | 'oct';\n\n/**\n * Defines values for JsonWebKeyCurveName.\n * Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'\n * @readonly\n * @enum {string}\n */\nexport type JsonWebKeyCurveName = 'P-256' | 'P-384' | 'P-521' | 'P-256K';\n\n/**\n * Defines values for DeletionRecoveryLevel.\n * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',\n * 'Recoverable+ProtectedSubscription', 'CustomizedRecoverable+Purgeable', 'CustomizedRecoverable',\n * 'CustomizedRecoverable+ProtectedSubscription'\n * @readonly\n * @enum {string}\n */\nexport type DeletionRecoveryLevel = 'Purgeable' | 'Recoverable+Purgeable' | 'Recoverable' | 'Recoverable+ProtectedSubscription' | 'CustomizedRecoverable+Purgeable' | 'CustomizedRecoverable' | 'CustomizedRecoverable+ProtectedSubscription';\n\n/**\n * Defines values for JsonWebKeyOperation.\n * Possible values include: 'encrypt', 'decrypt', 'sign', 'verify', 'wrapKey', 'unwrapKey',\n * 'import'\n * @readonly\n * @enum {string}\n */\nexport type JsonWebKeyOperation = 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'wrapKey' | 'unwrapKey' | 'import';\n\n/**\n * Defines values for JsonWebKeyEncryptionAlgorithm.\n * Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'\n * @readonly\n * @enum {string}\n */\nexport type JsonWebKeyEncryptionAlgorithm = 'RSA-OAEP' | 'RSA-OAEP-256' | 'RSA1_5';\n\n/**\n * Defines values for JsonWebKeySignatureAlgorithm.\n * Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL',\n * 'ES256', 'ES384', 'ES512', 'ES256K'\n * @readonly\n * @enum {string}\n */\nexport type JsonWebKeySignatureAlgorithm = 'PS256' | 'PS384' | 'PS512' | 'RS256' | 'RS384' | 'RS512' | 'RSNULL' | 'ES256' | 'ES384' | 'ES512' | 'ES256K';\n\n/**\n * Contains response data for the createKey operation.\n */\nexport type CreateKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n\n/**\n * Contains response data for the importKey operation.\n */\nexport type ImportKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n\n/**\n * Contains response data for the deleteKey operation.\n */\nexport type DeleteKeyResponse = DeletedKeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedKeyBundle;\n    };\n};\n\n/**\n * Contains response data for the updateKey operation.\n */\nexport type UpdateKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n\n/**\n * Contains response data for the getKey operation.\n */\nexport type GetKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n\n/**\n * Contains response data for the getKeyVersions operation.\n */\nexport type GetKeyVersionsResponse = KeyListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyListResult;\n    };\n};\n\n/**\n * Contains response data for the getKeys operation.\n */\nexport type GetKeysResponse = KeyListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyListResult;\n    };\n};\n\n/**\n * Contains response data for the backupKey operation.\n */\nexport type BackupKeyResponse = BackupKeyResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: BackupKeyResult;\n    };\n};\n\n/**\n * Contains response data for the restoreKey operation.\n */\nexport type RestoreKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n\n/**\n * Contains response data for the encrypt operation.\n */\nexport type EncryptResponse = KeyOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyOperationResult;\n    };\n};\n\n/**\n * Contains response data for the decrypt operation.\n */\nexport type DecryptResponse = KeyOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyOperationResult;\n    };\n};\n\n/**\n * Contains response data for the sign operation.\n */\nexport type SignResponse = KeyOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyOperationResult;\n    };\n};\n\n/**\n * Contains response data for the verify operation.\n */\nexport type VerifyResponse = KeyVerifyResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyVerifyResult;\n    };\n};\n\n/**\n * Contains response data for the wrapKey operation.\n */\nexport type WrapKeyResponse = KeyOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyOperationResult;\n    };\n};\n\n/**\n * Contains response data for the unwrapKey operation.\n */\nexport type UnwrapKeyResponse = KeyOperationResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyOperationResult;\n    };\n};\n\n/**\n * Contains response data for the getDeletedKeys operation.\n */\nexport type GetDeletedKeysResponse = DeletedKeyListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedKeyListResult;\n    };\n};\n\n/**\n * Contains response data for the getDeletedKey operation.\n */\nexport type GetDeletedKeyResponse = DeletedKeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedKeyBundle;\n    };\n};\n\n/**\n * Contains response data for the recoverDeletedKey operation.\n */\nexport type RecoverDeletedKeyResponse = KeyBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyBundle;\n    };\n};\n"]}